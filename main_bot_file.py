import json
import asyncio
import logging
import os
from aiogram.utils.exceptions import BotBlocked
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold, hlink
from main import check_new_content
from keyboards import kb, kb2, ikb, del_saved_ikb


logging.basicConfig(level=logging.INFO, filename="errors.log", filemode="a", encoding="utf-8")
bot = Bot(token="6297024039:AAGL5sim2qRaQ_6Ds9oGzZgZMXAvKVeNoAU"), parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
USERS = {}  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER = os.getenv(key="USER")
HELP = """–Ø - –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç –∏–≥—Ä–æ–≤–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏üî•! –Ø —É–º–µ—é –≤—ã–ø–æ–ª–Ω—è—Ç—å 4 —Ñ—É–Ω–∫—Ü–∏–∏:\n\n1.–ü—Ä–∏—Å–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ <i>–≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π</i>üìÑ
2.–í—ã—Å–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ <i>–ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π</i>üí¨\n3.–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º <i>—Ä–∞—Å—Å—ã–ª–∫–∏ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π</i>‚è±\n4.–í—ã—Å–ª–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö
<i>—Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π</i>üìö\n\n–ö–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–π –ø–æ–∑–∂–µ, –ª–∏–±–æ –∂–µ
—Å–∫—Ä—ã—Ç—å –µ—ë!"""


async def on_startup(_):
    print("–ë–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")


@dp.message_handler(commands=["start"])  # —Ñ-—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
async def process_start(message: types.Message):
    USERS[message.from_user.id] = {
        "saved_news": [],  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "fresh_news": False  # —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
    }
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.username if message.from_user.username is not None else '–¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}! –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, –ø–∏—à–∏ /help \n–ê —Ç–∞–∫, –≤—ã–±–∏—Ä–∞–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=kb)


@dp.message_handler(commands=["help"])  # —Ñ-—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
async def help_process(message: types.Message):
    await message.answer(HELP)


@dp.message_handler(lambda x: x.text and x.text.lower() in ("–≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏", "–≤—Å–µ", "–ø—Ä–∏—à–ª–∏ –≤—Å–µ"))
async def send_all_news(message: types.Message):
    with open("game_news.json", "r", encoding="utf-8") as nf:
        all_news = json.load(nf)

    for key, value in sorted(all_news.items())[-30:]:
        news_content = f"{hlink(value['description'], value['url'])}\n\n" \
                       f"–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {hbold(value['date'])}\n\n" \
                       f"–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é: '{value['comments']}\n\n"

        await message.answer(news_content, reply_markup=ikb)


@dp.message_handler(lambda y: y.text and y.text.lower() in ("–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", "–Ω–µ–¥–∞–≤–Ω–∏–µ", "–ø–æ—Å–ª–µ–¥–Ω–∏–µ"))
async def send_10_news(message: types.Message):
    with open("game_news.json", "r", encoding="utf-8") as nf:
        all_news = json.load(nf)

    for key, value in sorted(all_news.items())[-10:]:
        news_content = f"{hlink(value['description'], value['url'])}\n\n" \
                       f"–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {hbold(value['date'])}\n\n" \
                       f"–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é: '{value['comments']}"

        await message.answer(news_content, reply_markup=ikb)


@dp.message_handler(Text(equals="–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"))
async def send_saved_news(message: types.Message):
    saved_news = ""
    if len(USERS[message.from_user.id]["saved_news"]) > 0:
        for index, v in enumerate(USERS[message.from_user.id]["saved_news"], start=1):
            for search in v.split():
                if "http" in search:
                    saved_news += f"–ù–æ–≤–æ—Å—Ç—å {index} - {search[1:-9]}\n\n"
        await message.answer(saved_news, disable_web_page_preview=True)
        await message.answer("–ñ–µ–ª–∞–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π?", reply_markup=del_saved_ikb)
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π...")


@dp.message_handler(Text(equals="–†–µ–∂–∏–º —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"))
async def send_fresh_news(message: types.Message):
    USERS[message.from_user.id]["fresh_news"] = True
    await message.answer("–í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏, —è –ø—Ä–∏—à–ª—é –∏—Ö —Å—é–¥–∞!", reply_markup=kb2)
    while True:
        if USERS[message.from_user.id]["fresh_news"]:
            fresh_news = check_new_content()
            if len(fresh_news) >= 1:
                for key, value in sorted(fresh_news.items())[-10:]:
                    news_content = f"{hlink(value['description'], value['url'])}\n\n" \
                                   f"–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {hbold(value['date'])}\n\n" \
                                   f"–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—Å—É–∂–¥–µ–Ω–∏—é: '{value['comments']}"

                    await message.answer(news_content, reply_markup=ikb, parse_mode='HTML')
            else:
                continue
        else:
            break

        await asyncio.sleep(300)


@dp.message_handler(Text(equals="–û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π"))
async def cancel_fresh_news(message: types.Message):
    if USERS[message.from_user.id]["fresh_news"]:
        USERS[message.from_user.id]["fresh_news"] = False
        await message.answer("–†–µ–∂–∏–º –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω", reply_markup=kb)
    else:
        await message.answer("–†–µ–∂–∏–º –Ω–µ –±—ã–ª –≤–∫–ª—é—á–µ–Ω, —á—Ç–æ–±—ã –µ–≥–æ –æ—Ç–∫–ª—é—á–∞—Ç—å!", reply_markup=kb)


@dp.message_handler()
async def empty_case(message: types.Message):
    if message.from_user.id in USERS:
        await message.reply("–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω–æ–π –Ω–∏–∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π", reply_markup=kb)
    else:
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–∏—à–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")


@dp.callback_query_handler()
async def process_callback(call: types.CallbackQuery):
    if call.data == "save":
        if call.message.text not in USERS[call.from_user.id]["saved_news"]:
            await call.answer("–ù–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
            await call.message.edit_text(call.message.text)
            USERS[call.from_user.id]["saved_news"].append(call.message.text)
        else:
            await call.message.answer("–ù–æ–≤–æ—Å—Ç—å —É–∂–µ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
    elif call.data == "dislike":
        await call.answer("–ù–æ–≤–æ—Å—Ç—å —Å–∫—Ä—ã—Ç–∞")
        await call.message.delete()
    elif call.data == "delete":
        USERS[call.from_user.id]["saved_news"] = []
        await call.message.delete()
        await call.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!")
    else:
        await call.message.delete()


if __name__ == '__main__':
    try:
        loop = asyncio.get_event_loop()
        loop.create_task(send_fresh_news(USER))
        executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
    except BotBlocked as err:
        logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞", exc_info=True)
